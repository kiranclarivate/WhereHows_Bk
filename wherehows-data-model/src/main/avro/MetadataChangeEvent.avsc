{
  "type": "record",
  "name": "MetadataChangeEvent",
  "namespace": "com.linkedin.events.metadata",
  "fields": [
    {
      "name": "auditHeader",
      "type": {
        "type": "record",
        "name": "KafkaAuditHeader",
        "namespace": "com.linkedin.events",
        "fields": [
          {
            "name": "time",
            "type": "long",
            "doc": "The time at which the event was emitted into kafka."
          },
          {
            "name": "server",
            "type": "string",
            "doc": "The fully qualified name of the host from which the event is being emitted."
          },
          {
            "name": "instance",
            "type": [
              "null",
              "string"
            ],
            "doc": "The instance on the server from which the event is being emitted. e.g. i001"
          },
          {
            "name": "appName",
            "type": "string",
            "doc": "The name of the application from which the event is being emitted. see go/appname"
          },
          {
            "name": "messageId",
            "type": {
              "type": "fixed",
              "name": "UUID",
              "size": 16
            },
            "doc": "A unique identifier for the message"
          },
          {
            "name": "auditVersion",
            "type": [
              "null",
              "int"
            ],
            "doc": "The version that is being used for auditing. In version 0, the audit trail buckets events into 10 minute audit windows based on the EventHeader timestamp. In version 1, the audit trail buckets events as follows: if the schema has an outer KafkaAuditHeader, use the outer audit header timestamp for bucketing; else if the EventHeader has an inner KafkaAuditHeader use that inner audit header's timestamp for bucketing",
            "default": null
          },
          {
            "name": "fabricUrn",
            "type": [
              "null",
              "string"
            ],
            "doc": "The fabricUrn of the host from which the event is being emitted. Fabric Urn in the format of urn:li:fabric:{fabric_name}. See go/fabric.",
            "default": null
          }
        ]
      },
      "doc": "This header records information about the context of an event as it is emitted into kafka and is intended to be used by the kafka audit application.  For more information see go/kafkaauditheader"
    },
    {
      "name": "datasetIdentifier",
      "type": {
        "type": "record",
        "name": "DatasetIdentifier",
        "fields": [
          {
            "name": "dataPlatformUrn",
            "type": "string",
            "doc": "The platform or type of the metadata object: espresso,kafka,oracle,voldemort,hdfs,hive,dalids,teradata,greenplum... for example, urn:li:dataPlatform:espresso, urn:li:dataPlatform:dalids"
          },
          {
            "name": "nativeName",
            "type": "string",
            "doc": "The native name: <db>.<table>, /dir/subdir/<name>, or <name>"
          },
          {
            "name": "dataOrigin",
            "type": {
              "type": "enum",
              "name": "DataOrigin",
              "symbols": [
                "PROD",
                "CORP",
                "EI",
                "DEV"
              ]
            },
            "doc": "Origin/Source tier where the record is generated? This can be different from Deployment. For example, PROD data can be copied to a TEST server, then DataOrigin=PROD while the dataset instance belongs to TEST",
            "default": "PROD"
          }
        ]
      },
      "doc": "Unique Identifier of a dataset, which contains three parts: dataPlatform, name, origin"
    },
    {
      "name": "changeAuditStamp",
      "type": {
        "type": "record",
        "name": "ChangeAuditStamp",
        "fields": [
          {
            "name": "actorUrn",
            "type": [
              "null",
              "string"
            ],
            "doc": "urn:li:corpuser:jsmith, urn:li:team:xyz, urn:li:service:money"
          },
          {
            "name": "impersonatorUrn",
            "type": [
              "null",
              "string"
            ],
            "doc": "urn:li:group:espresso-sre, urn:li:team:xyz, urn:li:service:money"
          },
          {
            "name": "type",
            "type": {
              "type": "enum",
              "name": "ChangeType",
              "symbols": [
                "CREATE",
                "UPDATE",
                "DELETE"
              ]
            },
            "doc": "Type of change"
          },
          {
            "name": "time",
            "type": "long",
            "doc": "Epoch",
            "logicalType": "timestamp-millis"
          },
          {
            "name": "references",
            "type": [
              "null",
              {
                "type": "array",
                "items": [
                  {
                    "type": "record",
                    "name": "JiraReference",
                    "fields": [
                      {
                        "name": "jiraIssue",
                        "type": "string",
                        "doc": "jira issue number: META-123"
                      }
                    ]
                  },
                  {
                    "type": "record",
                    "name": "ReviewBoardReference",
                    "fields": [
                      {
                        "name": "reviewId",
                        "type": "int",
                        "doc": "review id: 123"
                      }
                    ]
                  },
                  {
                    "type": "record",
                    "name": "WikiReference",
                    "fields": [
                      {
                        "name": "wikiUrl",
                        "type": "string",
                        "doc": "wiki url"
                      }
                    ]
                  },
                  {
                    "type": "record",
                    "name": "ScmReference",
                    "fields": [
                      {
                        "name": "scmUrl",
                        "type": "string",
                        "doc": "source code url in SCM: git://abc, svn://abc"
                      }
                    ]
                  }
                ]
              }
            ],
            "doc": "Array of reference info, e.g. links to records in other systems that resulted in this metadata change."
          },
          {
            "name": "note",
            "type": [
              "null",
              "string"
            ],
            "doc": "Extra detail about the changes"
          }
        ]
      },
      "doc": "The change auditing information, including actor, change type and timestamp, etc"
    },
    {
      "name": "datasetProperty",
      "type": [
        "null",
        {
          "type": "record",
          "name": "DatasetProperty",
          "fields": [
            {
              "name": "nativeType",
              "type": {
                "type": "enum",
                "name": "PlatformNativeType",
                "symbols": [
                  "TABLE",
                  "VIEW",
                  "DIRECTORY",
                  "FILE",
                  "INDEX",
                  "STREAM",
                  "BLOB",
                  "FUNCTION",
                  "OTHER"
                ]
              },
              "doc": "The native type about how the dataset is stored in the platform"
            },
            {
              "name": "storageType",
              "type": [
                "null",
                {
                  "type": "enum",
                  "name": "DatasetStorageType",
                  "symbols": [
                    "TABLE",
                    "EXTERNAL_TABLE",
                    "VIEW",
                    "MATERIALIZED_VIEW",
                    "AVRO",
                    "ORC",
                    "PARQUET",
                    "RC",
                    "JSON",
                    "BINARY_JSON",
                    "SEQUENCE",
                    "FLAT_FILE",
                    "XML",
                    "INDEX",
                    "PROTOCOL_BUFFER",
                    "THRIFT",
                    "BINARY",
                    "OTHER"
                  ]
                }
              ],
              "doc": "The type or format that the dataset is stored with in the platform",
              "default": null
            },
            {
              "name": "uri",
              "type": [
                "null",
                "string"
              ],
              "doc": "The abstracted such as hdfs:///data/tracking/PageViewEvent, file:///dir/file_name. This is often used in codes and scripts."
            },
            {
              "name": "caseSensitivity",
              "type": [
                "null",
                {
                  "type": "record",
                  "name": "CaseSensitivityInfo",
                  "fields": [
                    {
                      "name": "datasetName",
                      "type": "boolean",
                      "doc": "Is native object name CS?",
                      "default": true
                    },
                    {
                      "name": "fieldName",
                      "type": "boolean",
                      "doc": "Is field name CS?",
                      "default": true
                    },
                    {
                      "name": "dataContent",
                      "type": "boolean",
                      "doc": "Is data content CS?",
                      "default": true
                    }
                  ]
                }
              ]
            },
            {
              "name": "extras",
              "type": [
                "null",
                {
                  "type": "map",
                  "values": "string"
                }
              ],
              "doc": "Extra dataset property information",
              "default": null
            }
          ]
        }
      ],
      "doc": "Basic properties of a dataset, such as Native Type, Case Sensitivity, URI"
    },
    {
      "name": "owners",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "OwnerInfo",
            "fields": [
              {
                "name": "ownerCategory",
                "type": {
                  "type": "enum",
                  "name": "OwnerCategory",
                  "symbols": [
                    "DATA_OWNER",
                    "PRODUCER",
                    "DELEGATE",
                    "STAKEHOLDER",
                    "CONSUMER"
                  ]
                },
                "doc": "The category of the owner role"
              },
              {
                "name": "owner",
                "type": "string",
                "doc": "user id, group name, service name, product name, etc"
              },
              {
                "name": "ownerType",
                "type": {
                  "type": "enum",
                  "name": "OwnerType",
                  "symbols": [
                    "URN",
                    "USER",
                    "GROUP",
                    "ROLE",
                    "SERVICE",
                    "MULTIPRODUCT"
                  ]
                },
                "doc": "user, group, role, service, or urn"
              },
              {
                "name": "ownershipProvider",
                "type": [
                  "null",
                  {
                    "type": "enum",
                    "name": "OwnershipProvider",
                    "symbols": [
                      "SCM",
                      "NUAGE",
                      "SOS",
                      "JIRA",
                      "RB",
                      "DB",
                      "FS",
                      "AUDIT",
                      "OTHER"
                    ]
                  }
                ],
                "doc": "The provider or source of the ownership information"
              }
            ]
          }
        }
      ],
      "doc": "A complete list of owners info"
    },
    {
      "name": "partitionSpec",
      "type": [
        "null",
        {
          "type": "record",
          "name": "PartitionSpecification",
          "fields": [
            {
              "name": "totalPartitionLevel",
              "type": [
                "null",
                "int"
              ],
              "doc": "What is the deepest partition level, start at level 1. See Composite partitioning in https://en.wikipedia.org/wiki/Partition_(database)"
            },
            {
              "name": "partitionSpecText",
              "type": [
                "null",
                "string"
              ],
              "doc": "Original partition spec or DDL"
            },
            {
              "name": "hasTimePartition",
              "type": [
                "null",
                "boolean"
              ],
              "doc": "Does the dataset contain time partition?"
            },
            {
              "name": "hasHashPartition",
              "type": [
                "null",
                "boolean"
              ],
              "doc": "Does the dataset contain hash/shard partition?"
            },
            {
              "name": "partitionKeys",
              "type": [
                "null",
                {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "PartitionKey",
                    "fields": [
                      {
                        "name": "partitionLevel",
                        "type": "int",
                        "doc": "1,2,3..."
                      },
                      {
                        "name": "partitionType",
                        "type": {
                          "type": "enum",
                          "name": "PartitionType",
                          "symbols": [
                            "RANGE",
                            "HASH",
                            "LIST",
                            "CASE",
                            "ROUND_ROBIN"
                          ]
                        }
                      },
                      {
                        "name": "timeFormat",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "yyyyMMdd, yyyy-MM-dd or Epoch. https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html"
                      },
                      {
                        "name": "fieldNames",
                        "type": {
                          "type": "array",
                          "items": "string"
                        },
                        "doc": "Partition keys (use the full field path for nested fields, e.g. header.time)",
                        "default": []
                      },
                      {
                        "name": "partitionValues",
                        "type": {
                          "type": "array",
                          "items": "string"
                        },
                        "doc": "The complete array of partition values. For RANGE: [min, next_partition_min_value); for LIST: [value1, value2...], for CASE: [expr1, expr2]; for Hive: [value]; for HASH: N/A",
                        "default": []
                      },
                      {
                        "name": "numberOfHashBuckets",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "2,4,8,16..."
                      }
                    ]
                  }
                }
              ],
              "doc": "Array of partition keys/fields"
            }
          ]
        }
      ],
      "doc": "Partition specification detail"
    },
    {
      "name": "deploymentInfo",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "DeploymentDetail",
            "fields": [
              {
                "name": "deploymentTier",
                "type": {
                  "type": "enum",
                  "name": "DeploymentTier",
                  "symbols": [
                    "PROD",
                    "CORP",
                    "GRID",
                    "PREPROD",
                    "CANARY",
                    "DMZ",
                    "STG",
                    "UAT",
                    "UAT1",
                    "UAT2",
                    "UAT3",
                    "QA",
                    "QA1",
                    "QA2",
                    "QA3",
                    "EI",
                    "EI1",
                    "EI2",
                    "EI3",
                    "QEI",
                    "QEI1",
                    "QEI2",
                    "QEI3",
                    "TEST",
                    "LIT",
                    "SIT",
                    "INT",
                    "DEV",
                    "LOCAL",
                    "ARCHIVE",
                    "DROPBOX",
                    "SANDBOX",
                    "POC"
                  ]
                },
                "doc": "defined in [dataOrigin], such as DEV,TEST,PROD",
                "default": "PROD"
              },
              {
                "name": "dataCenter",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "DC1, DC2, LTX3, LVA4, ..."
              },
              {
                "name": "region",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "Region name if applicable, such as us-central2, eu-west3"
              },
              {
                "name": "zone",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "Zone name or id if applicable, such as asia-east1-b, us-west1-a"
              },
              {
                "name": "cluster",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "Cluster name or a comma-delimited list of Servers"
              },
              {
                "name": "container",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "Container or tenant name"
              },
              {
                "name": "enabled",
                "type": "boolean",
                "doc": "is the dataset instance enabled under this deployment environment"
              },
              {
                "name": "additionalDeploymentInfo",
                "type": {
                  "type": "map",
                  "values": "string"
                },
                "doc": "Additional deployment info, such as Zookeeper, Connection, Graphite URL, native reference ID or KEY"
              }
            ]
          }
        }
      ],
      "doc": "The deployment info"
    },
    {
      "name": "tags",
      "type": [
        "null",
        {
          "type": "array",
          "items": "string"
        }
      ],
      "doc": "Tags of the dataset object"
    },
    {
      "name": "schema",
      "type": [
        "null",
        {
          "type": "record",
          "name": "DatasetSchema",
          "fields": [
            {
              "name": "isBackwardCompatible",
              "type": [
                "null",
                "boolean"
              ],
              "doc": "Is this revision compatible with the previous revision? null means unknown"
            },
            {
              "name": "isFieldNameCaseSensitive",
              "type": "boolean",
              "doc": "Are the field names in schema Case Sensitive?",
              "default": true
            },
            {
              "name": "createTime",
              "type": "long",
              "doc": "epoch milli",
              "logicalType": "timestamp-millis"
            },
            {
              "name": "revision",
              "type": [
                "null",
                "int"
              ],
              "doc": "revision if applicable"
            },
            {
              "name": "version",
              "type": [
                "null",
                "string"
              ],
              "doc": "1.0.3, 2.12, 2_3_6"
            },
            {
              "name": "name",
              "type": [
                "null",
                "string"
              ],
              "doc": "name or class name if applicable"
            },
            {
              "name": "description",
              "type": [
                "null",
                "string"
              ],
              "doc": "description"
            },
            {
              "name": "rawSchema",
              "type": {
                "type": "record",
                "name": "RawSchema",
                "fields": [
                  {
                    "name": "format",
                    "type": {
                      "type": "enum",
                      "name": "SchemaTextFormat",
                      "symbols": [
                        "JSON",
                        "XML",
                        "DDL",
                        "THRIFT",
                        "PROTOBUF",
                        "HOCON",
                        "TEXT"
                      ]
                    },
                    "default": "TEXT"
                  },
                  {
                    "name": "content",
                    "type": "string",
                    "doc": "The raw schema content"
                  },
                  {
                    "name": "checksum",
                    "type": [
                      "null",
                      {
                        "type": "array",
                        "items": {
                          "type": "record",
                          "name": "SchemaChecksum",
                          "fields": [
                            {
                              "name": "checksumType",
                              "type": "string",
                              "doc": "MD5, SHA-1, CRC32, etc"
                            },
                            {
                              "name": "checksumValue",
                              "type": "string",
                              "doc": "checksum value"
                            }
                          ]
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {
              "name": "keySchema",
              "type": [
                "null",
                {
                  "type": "record",
                  "name": "DatasetKeySchema",
                  "fields": [
                    {
                      "name": "format",
                      "type": "SchemaTextFormat",
                      "doc": "only applicable if key schema exists",
                      "default": "JSON"
                    },
                    {
                      "name": "text",
                      "type": "string",
                      "doc": "schema for the Key if applicable"
                    }
                  ]
                }
              ],
              "doc": "if dataset has dedicated key schema which is separated from the table or value part, it can be stored here"
            },
            {
              "name": "fieldSchema",
              "type": [
                "null",
                {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "FieldSchema",
                    "fields": [
                      {
                        "name": "position",
                        "type": "int",
                        "doc": "Field position id, SORT_ID. Starting from 1"
                      },
                      {
                        "name": "parentFieldPosition",
                        "type": "int",
                        "doc": "Position id of the parent field for nested structure. 0 means this field is a top-level field"
                      },
                      {
                        "name": "fieldPath",
                        "type": "string",
                        "doc": "For example, <grand_grand_parent>.<grand_parent>.<parent>.<name>"
                      },
                      {
                        "name": "fieldJsonPath",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "http://goessner.net/articles/JsonPath this is an alternative for fieldPath. For example, $.store.book[0].title"
                      },
                      {
                        "name": "label",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "Field title/label for display"
                      },
                      {
                        "name": "aliases",
                        "type": [
                          "null",
                          {
                            "type": "array",
                            "items": "string"
                          }
                        ],
                        "doc": "Field aliases."
                      },
                      {
                        "name": "type",
                        "type": "string",
                        "doc": "native data type"
                      },
                      {
                        "name": "logicalType",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "when the native type is too generic, logical data type is specified. e.g. DateTime, NUMBER(15,2), GUID, Epoch(3), Epoch(0)"
                      },
                      {
                        "name": "semanticType",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "semantic data type. can be Urn, MemberId, Email, PhoneNumber, GroupName, etc."
                      },
                      {
                        "name": "abstractType",
                        "type": [
                          "null",
                          {
                            "type": "enum",
                            "name": "AbstractDataType",
                            "symbols": [
                              "STRING",
                              "NUMBER",
                              "BINARY",
                              "BOOLEAN",
                              "TIMESTAMP",
                              "ARRAY",
                              "MAP",
                              "STRUCT",
                              "UNION"
                            ]
                          }
                        ],
                        "doc": "Standard types to generate canonical schema abstraction. Hide the subtle difference."
                      },
                      {
                        "name": "description",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "field comment/description"
                      },
                      {
                        "name": "nullable",
                        "type": "boolean",
                        "doc": "Is the field nullable",
                        "default": true
                      },
                      {
                        "name": "defaultValue",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "default value"
                      },
                      {
                        "name": "maxByteLength",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "max length in bytes. For UTF8, maxByteLength = maxCharLength x 3"
                      },
                      {
                        "name": "maxCharLength",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "max length in characters"
                      },
                      {
                        "name": "charType",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "ascii, utf8, utf16, latin, etc. https://en.wikipedia.org/wiki/Character_encoding"
                      },
                      {
                        "name": "precision",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "number(p,s)"
                      },
                      {
                        "name": "scale",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "number(p,s)"
                      },
                      {
                        "name": "isRecursive",
                        "type": "boolean",
                        "doc": "Does this field contains recursive structure?"
                      }
                    ]
                  }
                }
              ],
              "doc": "flattened/normalized field-level schema definition with fully-qualified field path"
            },
            {
              "name": "changeDataCaptureFields",
              "type": {
                "type": "array",
                "items": {
                  "type": "record",
                  "name": "ChangeDataCaptureField",
                  "fields": [
                    {
                      "name": "fieldPath",
                      "type": "string",
                      "doc": "field path"
                    },
                    {
                      "name": "role",
                      "type": {
                        "type": "enum",
                        "name": "ChangeDataCaptureRole",
                        "symbols": [
                          "SEQUENCE",
                          "TIME"
                        ]
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      ],
      "doc": "The schema/structure definition of a dataset. For Key-Value and Document db, a dedicated KeySchema is provided. Schema includes KeySchema, OriginalSchema, FieldSchema, ChangeDataCaptureFields, AuditFields"
    },
    {
      "name": "constraints",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "Constraint",
            "fields": [
              {
                "name": "constraintType",
                "type": {
                  "type": "enum",
                  "name": "ConstraintType",
                  "symbols": [
                    "CONSTRAINT",
                    "REFERENTIAL",
                    "INDEX",
                    "DATAQUALITY",
                    "SECURITY"
                  ]
                }
              },
              {
                "name": "constraintSubType",
                "type": {
                  "type": "enum",
                  "name": "ConstraintSubType",
                  "symbols": [
                    "RANGE",
                    "LIST",
                    "REGEXP"
                  ]
                }
              },
              {
                "name": "constraintName",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "constraint name"
              },
              {
                "name": "constraintExpression",
                "type": "string",
                "doc": "Expression in constraint"
              },
              {
                "name": "enabled",
                "type": "boolean",
                "doc": "Is constraint enabled",
                "default": true
              },
              {
                "name": "referredFields",
                "type": {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "ReferenceField",
                    "fields": [
                      {
                        "name": "position",
                        "type": "int",
                        "doc": "Position in a constraint, starting from 1"
                      },
                      {
                        "name": "fieldPath",
                        "type": "string",
                        "doc": "Field name with full path"
                      }
                    ]
                  }
                }
              },
              {
                "name": "additionalReferences",
                "type": [
                  "null",
                  "string"
                ],
                "doc": "additional reference for constraint. When type = Index, refers to PK/AK index name; when type = Constraint, refers to another dataset's constraint, such as FK; when type = DataQuality, points to data quality rule."
              }
            ]
          }
        }
      ]
    },
    {
      "name": "indices",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "Index",
            "fields": [
              {
                "name": "indexType",
                "type": "string",
                "doc": "Original index type, e.g. BTree, Hash, Fulltext, Normal, etc"
              },
              {
                "name": "indexName",
                "type": "string",
                "doc": "Index name"
              },
              {
                "name": "isUnique",
                "type": "boolean",
                "doc": "Is unique index or not",
                "default": false
              },
              {
                "name": "indexedFields",
                "type": {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "IndexedFieldName",
                    "fields": [
                      {
                        "name": "position",
                        "type": "int",
                        "doc": "Position id within an index"
                      },
                      {
                        "name": "fieldPath",
                        "type": "string",
                        "doc": "Field name or expression"
                      },
                      {
                        "name": "ordering",
                        "type": [
                          "null",
                          {
                            "type": "enum",
                            "name": "DataOrdering",
                            "symbols": [
                              "ASC",
                              "DESC",
                              "UNORDERED"
                            ]
                          }
                        ],
                        "doc": "data ordering"
                      },
                      {
                        "name": "prefixLength",
                        "type": [
                          "null",
                          "int"
                        ],
                        "doc": "The length of the prefix portion of a string"
                      },
                      {
                        "name": "filter",
                        "type": [
                          "null",
                          "string"
                        ],
                        "doc": "Filter expression for conditional index"
                      }
                    ]
                  }
                },
                "doc": "Fields in an index"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "capacity",
      "type": [
        "null",
        {
          "type": "array",
          "items": {
            "type": "record",
            "name": "Capacity",
            "fields": [
              {
                "name": "capacityName",
                "type": "string",
                "doc": "Capacity name"
              },
              {
                "name": "capacityType",
                "type": "string",
                "doc": "storage, read qps, write qps, response time, ...",
                "default": "storage"
              },
              {
                "name": "capacityUnit",
                "type": [
                  "null",
                  {
                    "type": "enum",
                    "name": "CapacityMeasurementUnit",
                    "symbols": [
                      "BYTE",
                      "KB",
                      "MB",
                      "GB",
                      "TB",
                      "PB",
                      "QPS",
                      "m",
                      "s",
                      "ms"
                    ]
                  }
                ],
                "doc": "measurement unit when applicable"
              },
              {
                "name": "capacityLow",
                "type": "double",
                "doc": "lower/min capacity"
              },
              {
                "name": "capacityHigh",
                "type": "double",
                "doc": "higher/max capacity"
              }
            ]
          }
        }
      ]
    },
    {
      "name": "compliancePolicy",
      "type": [
        "null",
        {
          "type": "record",
          "name": "CompliancePolicy",
          "fields": [
            {
              "name": "compliancePurgeType",
              "type": {
                "type": "enum",
                "name": "CompliancePurgeType",
                "symbols": [
                  "AUTO_PURGE",
                  "CUSTOM_PURGE",
                  "LIMITED_RETENTION",
                  "PURGE_NOT_APPLICABLE",
                  "MANUAL_PURGE",
                  "MANUAL_LIMITED_RETENTION",
                  "PURGE_EXEMPTED"
                ]
              }
            },
            {
              "name": "compliancePurgeNote",
              "type": [
                "null",
                "string"
              ],
              "doc": "The additional information about purging if the purge type is PURGE_EXEMPTED",
              "default": null
            },
            {
              "name": "complianceEntities",
              "type": [
                "null",
                {
                  "type": "array",
                  "items": {
                    "type": "record",
                    "name": "ComplianceEntity",
                    "fields": [
                      {
                        "name": "fieldPath",
                        "type": "string",
                        "doc": "a fieldPath / pathspec to a field of the record schema"
                      },
                      {
                        "name": "complianceDataType",
                        "type": {
                          "type": "enum",
                          "name": "ComplianceDataType",
                          "symbols": [
                            "NONE",
                            "MEMBER_ID",
                            "SUBJECT_MEMBER_ID",
                            "GROUP_ID",
                            "COMPANY_ID",
                            "MIXED_ID",
                            "CUSTOM_ID",
                            "EMAIL",
                            "NAME",
                            "PHONE",
                            "ADDRESS",
                            "LATITUDE_LONGITUDE",
                            "CITY_STATE_REGION",
                            "IP_ADDRESS",
                            "FINANCIAL_NUMBER",
                            "PAYMENT_INFO",
                            "PASSWORD_CREDENTIAL",
                            "AUTHENTICATION_TOKEN",
                            "MESSAGE",
                            "NATIONAL_ID",
                            "SOCIAL_NETWORK_ID",
                            "EVENT_TIME",
                            "TRANSACTION_TIME",
                            "COOKIE_BEACON_BROWSER_ID",
                            "DEVICE_ID_ADVERTISING_ID",
                            "ENTERPRISE_PROFILE_ID",
                            "ENTERPRISE_ACCOUNT_ID",
                            "CONTRACT_ID",
                            "SEAT_ID",
                            "ADVERTISER_ID",
                            "SLIDESHARE_USER_ID"
                          ]
                        }
                      },
                      {
                        "name": "fieldFormat",
                        "type": [
                          "null",
                          {
                            "type": "enum",
                            "name": "FieldFormat",
                            "symbols": [
                              "NUMERIC",
                              "URN",
                              "REVERSED_URN",
                              "COMPOSITE_URN"
                            ]
                          }
                        ],
                        "doc": "Specify the optional field format"
                      },
                      {
                        "name": "securityClassification",
                        "type": {
                          "type": "enum",
                          "name": "SecurityClassification",
                          "symbols": [
                            "CONFIDENTIAL",
                            "HIGHLY_CONFIDENTIAL",
                            "LIMITED_DISTRIBUTION",
                            "UNCLASSIFIED"
                          ]
                        },
                        "doc": "Field security classification that governs data handling."
                      }
                    ]
                  }
                }
              ],
              "doc": "The fields which identify compliance entities in records"
            },
            {
              "name": "datasetConfidentiality",
              "type": "SecurityClassification",
              "doc": "dataset level confidential category"
            },
            {
              "name": "datasetClassification",
              "type": {
                "type": "record",
                "name": "DatasetClassification",
                "fields": [
                  {
                    "name": "connectionsOrFollowersOrFollowing",
                    "type": "boolean",
                    "doc": "Dataset contains information about member connections, followers or following"
                  },
                  {
                    "name": "profile",
                    "type": "boolean",
                    "doc": "Dataset contains member profile data"
                  },
                  {
                    "name": "messaging",
                    "type": "boolean",
                    "doc": "Dataset contains messaging data, including both the message content and metadata (sender, receiver, time, etc)"
                  },
                  {
                    "name": "thirdPartyIntegrationsInUse",
                    "type": "boolean",
                    "doc": "Dataset contains third party integration usage data"
                  },
                  {
                    "name": "activity",
                    "type": "boolean",
                    "doc": "Dataset contains member activity information that is viewable to other members (newsfeed posts, blog posts, shares, likes, etc)"
                  },
                  {
                    "name": "settings",
                    "type": "boolean",
                    "doc": "Dataset contains member personal settings"
                  },
                  {
                    "name": "jobApplicationFlow",
                    "type": "boolean",
                    "doc": "Dataset contains job application flow information: job applications, resumes, application status, etc"
                  },
                  {
                    "name": "enterpriseProduct",
                    "type": "boolean",
                    "doc": "Dataset contains enterprise product data: recruiter search data, sales navigator data, etc"
                  },
                  {
                    "name": "accountStatus",
                    "type": "boolean",
                    "doc": "Dataset contains member account status: premium, sales navigator user, etc"
                  },
                  {
                    "name": "addressBookImports",
                    "type": "boolean",
                    "doc": "Dataset contains address book import data or data derived from imported address book data"
                  },
                  {
                    "name": "microsoftData",
                    "type": "boolean",
                    "doc": "Dataset contains data coming over from Microsoft"
                  },
                  {
                    "name": "subsidiaryData",
                    "type": "boolean",
                    "doc": "Dataset contains data from companies LinkedIn acquired (Lynda, Slideshare, etc)"
                  },
                  {
                    "name": "otherThirdPartyIntegrations",
                    "type": "boolean",
                    "doc": "Dataset contains other third party integrations: cell phone uploads, etc"
                  },
                  {
                    "name": "device",
                    "type": "boolean",
                    "doc": "Dataset contains member device information: IP address, device ID, browser ID, etc"
                  },
                  {
                    "name": "searchHistory",
                    "type": "boolean",
                    "doc": "Dataset contains search history on LinkedIn platforms"
                  },
                  {
                    "name": "courseViewingHistory",
                    "type": "boolean",
                    "doc": "Dataset contains course viewing history on LinkedIn Learning"
                  },
                  {
                    "name": "whoViewedMyProfile",
                    "type": "boolean",
                    "doc": "Dataset contains data that is ingested/created/inferred/derived in relation to providing the WVMP feature"
                  },
                  {
                    "name": "profileViewsByMe",
                    "type": "boolean",
                    "doc": "Dataset contains data regarding which profiles a member viewed (member IDs for the other profiles, referring URLs, etc)"
                  },
                  {
                    "name": "advertising",
                    "type": "boolean",
                    "doc": "Dataset contains advertising data: data from advertising partners, ad clicks/views, etc"
                  },
                  {
                    "name": "usageOrErrorOrConnectivity",
                    "type": "boolean",
                    "doc": "Dataset contains member usage, error reporting or connectivity data"
                  },
                  {
                    "name": "otherClickstreamOrBrowsingData",
                    "type": "boolean",
                    "doc": "Dataset contains other click-related data that doesn't fit into a bucket above."
                  }
                ]
              },
              "doc": "dataset level classification: dataset contains such category of data or not, e.g. 'PROFILE_DATA':false"
            }
          ]
        }
      ],
      "doc": "Human-entered compliance metadata"
    },
    {
      "name": "suggestedCompliancePolicy",
      "type": [
        "null",
        {
          "type": "record",
          "name": "SuggestedCompliancePolicy",
          "fields": [
            {
              "name": "suggestedFieldClassifications",
              "type": {
                "type": "array",
                "items": {
                  "type": "record",
                  "name": "SuggestedFieldClassification",
                  "fields": [
                    {
                      "name": "suggestion",
                      "type": "ComplianceEntity",
                      "doc": "Suggestion for the field level compliance metadata."
                    },
                    {
                      "name": "confidenceLevel",
                      "type": "float",
                      "doc": "The confidence level for the suggestion."
                    }
                  ]
                }
              },
              "doc": "A list of suggested field-level compliance metadata."
            },
            {
              "name": "suggestedDatasetClassification",
              "type": {
                "type": "map",
                "values": {
                  "type": "record",
                  "name": "SuggestedDatasetClassification",
                  "fields": [
                    {
                      "name": "isContaining",
                      "type": "boolean",
                      "doc": "Whether the dataset contains the specific kind of data."
                    },
                    {
                      "name": "confidenceLevel",
                      "type": "float",
                      "doc": "The confidence level for the suggestion."
                    }
                  ]
                }
              },
              "doc": "A map of suggested dataset-level compliance metadata, where the key is the field name of DatasetClassification, and the value is the corresponding suggestion for that field."
            }
          ]
        }
      ],
      "doc": "Machine-suggested compliance metadata",
      "default": null
    }
  ]
}